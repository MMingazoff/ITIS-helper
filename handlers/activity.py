import aiogram.types
from aiogram import types, Dispatcher
from keyboards import (menu_markup,
                       activity_markup,
                       events_inline_markup,
                       someone_points_markup,
                       top_students_markup,
                       delete_msg_inline_markup,
                       choose_events_markup)
from scripts.excel import is_a_student_by_fi
from scripts.vk_parsing import get_request_posts, get_du_posts
from handlers.fsm import FSM_activity, FSM_start
from scripts.sql import get_profile
from scripts.excel import get_group_by_fio, get_course_by_fio, from_du

request_posts = list()
du_posts = list()


async def activity(message: types.Message):
    if message.text == '–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è':
        fio = get_profile(message.from_user.id)
        if from_du(fio):
            await message.answer("–ö–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Ç–µ–±–µ –Ω—É–∂–Ω—ã?", reply_markup=choose_events_markup())
            await FSM_activity.activities.set()
        else:
            # –≤—ã–≤–æ–¥ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞
            global request_posts
            request_posts = get_request_posts()
            await message.answer(request_posts[0][0],
                                 reply_markup=events_inline_markup("itisrequest", request_posts[0][1], 0),
                                 parse_mode=types.ParseMode.HTML)
    if message.text == '–Ø –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ':
        ur_place = '–¢—É—Ç –±—É–¥—É—Ç —Ç–≤–æ–µ –º–µ—Å—Ç–æ –∏ —Ç–≤–æ–∏ –±–∞–ª–ª—ã'
        await message.answer(ur_place)
    if message.text == '–£–∑–Ω–∞—Ç—å –±–∞–ª–ª—ã —á–µ–ª–æ–≤–µ–∫–∞':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞', reply_markup=someone_points_markup())
        await FSM_activity.someone_points.set()
    if message.text == '–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥':
        await message.answer('–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–Ω—Ç–æ–≤ —Å 1 –ø–æ 10 –º–µ—Å—Ç–æ', reply_markup=top_students_markup())
        await FSM_activity.top_students.set()
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        fio = get_profile(message.from_user.id)
        course = get_course_by_fio(fio)
        group = get_group_by_fio(fio)
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {fio}, —è –≥–æ—Ç–æ–≤ —Ç–µ–±–µ –ø–æ–º–æ–≥–∞—Ç—å\n\n–§–ò–û: {fio} \n–ö—É—Ä—Å: {course} \n–ì—Ä—É–ø–ø–∞: {group} \n–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?',
            reply_markup=menu_markup())
        await FSM_start.menu.set()


async def choose_activity(message: types.Message):
    if message.text == 'Itis Request':
        global request_posts
        request_posts = get_request_posts()
        await message.answer(request_posts[0][0],
                             reply_markup=events_inline_markup("itisrequest", request_posts[0][1], 0),
                             parse_mode=types.ParseMode.HTML)
    if message.text == '–î–£ 18':
        global du_posts
        du_posts = get_du_posts()
        await message.answer(du_posts[0][0],
                             reply_markup=events_inline_markup("du", du_posts[0][1], 0),
                             parse_mode=types.ParseMode.HTML)
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        fio = get_profile(message.from_user.id)
        course = get_course_by_fio(fio)
        group = get_group_by_fio(fio)
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {fio}, —è –≥–æ—Ç–æ–≤ —Ç–µ–±–µ –ø–æ–º–æ–≥–∞—Ç—å\n\n–§–ò–û: {fio} \n–ö—É—Ä—Å: {course} \n–ì—Ä—É–ø–ø–∞: {group} \n–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?',
            reply_markup=menu_markup())
        await FSM_start.menu.set()


async def post_navigation(call: types.CallbackQuery):
    group_name, post_num = call.data.split('post')
    group_name = group_name[:-4]
    post_num = int(post_num)
    if 'next' in call.data:
        post_num += 1
    if 'prev' in call.data:
        post_num -= 1
    if group_name == 'itisrequest':
        global request_posts
        await call.message.edit_text(request_posts[post_num][0],
                                     reply_markup=events_inline_markup("itisrequest",
                                                                       request_posts[post_num][1],
                                                                       post_num),
                                     parse_mode=types.ParseMode.HTML)
    if group_name == 'du':
        global du_posts
        await call.message.edit_text(du_posts[post_num][0],
                                     reply_markup=events_inline_markup("du", du_posts[post_num][1], post_num),
                                     parse_mode=types.ParseMode.HTML)

    await call.answer()


async def fio_copy_callback(call: types.CallbackQuery):
    fio = get_profile(call.from_user.id)
    group = get_group_by_fio(fio)
    await call.message.answer(f'–ù–∞–∂–º–∏, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å üëá:\n`{fio} {group}`',
                              parse_mode=aiogram.types.ParseMode.MARKDOWN,
                              reply_markup=delete_msg_inline_markup())
    await call.answer()


async def delete_msg_callback(call: types.CallbackQuery):
    await call.message.delete()
    await call.answer()


async def someone_points(message: types.Message):
    if is_a_student_by_fi(message.text):
        await message.answer(f'–£ {message.text} n –±–∞–ª–ª–æ–≤ –∏ –æ–Ω –Ω–∞ k –º–µ—Å—Ç–µ')
    elif message.text == '–ù–∞–∑–∞–¥ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å':
        await message.answer(
            '–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥, —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –±–∞–ª–ª—ã –∏ —É–∑–Ω–∞—Ç—å –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã',
            reply_markup=activity_markup())
        await FSM_activity.activity.set()
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç—É, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –µ—â—ë —Ä–∞–∑')


async def top_students(message: types.Message):
    if message.text == '1-10 –º–µ—Å—Ç–æ':
        rating = '–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–Ω—Ç–æ–≤ —Å 1 –ø–æ 10 –º–µ—Å—Ç–æ'
        await message.answer(rating)
    if message.text == '11-20 –º–µ—Å—Ç–æ':
        rating = '–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–Ω—Ç–æ–≤ —Å 11 –ø–æ 20 –º–µ—Å—Ç–æ'
        await message.answer(rating)
    if message.text == '21-30 –º–µ—Å—Ç–æ':
        rating = '–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–Ω—Ç–æ–≤ —Å 21 –ø–æ 30 –º–µ—Å—Ç–æ'
        await message.answer(rating)
    if message.text == '–ù–∞–∑–∞–¥ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å':
        await message.answer(
            '–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥, —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –±–∞–ª–ª—ã –∏ —É–∑–Ω–∞—Ç—å –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã',
            reply_markup=activity_markup())
        await FSM_activity.activity.set()


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(activity, state=FSM_activity.activity)
    dp.register_message_handler(choose_activity, state=FSM_activity.activities)
    dp.register_callback_query_handler(post_navigation, state="*", text_contains='post')
    dp.register_callback_query_handler(fio_copy_callback, state="*", text='copyfio')
    dp.register_callback_query_handler(delete_msg_callback, state="*", text='todelete')
    dp.register_message_handler(someone_points, state=FSM_activity.someone_points)
    dp.register_message_handler(top_students, state=FSM_activity.top_students)
